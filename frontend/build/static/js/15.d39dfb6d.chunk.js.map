{"version":3,"sources":["components/Buttons.js","components/OrdersTableSkeleton.js","img/refresh.svg","API/deleteOrderAPI.js","components/account/UserOrdersPage.js","hooks/useUserOrdersPage.js","components/FilterOrderStateOptions.js","components/SortOrdersOptions.js","components/dashboard/DashboardOrders.js","hooks/useDashboardOrders.js"],"names":["Button","styled","a","props","theme","lightBoxShadow","darckYellow","small","black","ButtonPrimary","orange","Table","div","TableHeader","TableCells","OrdersTableSkeleton","token","id","DELETE","console","log","deleteOrderAPI","Page","main","lightYellow","isLoading","LoaderSpinner","TableHead","thead","TableWrapper","OrdersTable","table","lihgtBoxShadow","CancelOrderButton","button","disabled","NotFounMessage","NotFounIcone","h2","RefreshButton","RefreshIcone","img","UserOrdersPage","setNotification","history","useHistory","useStorage","setIsLoading","currentUser","deleteOrder","e","stopPropagation","target","setIsLoadingPage","handleRefresh","query","URLSearchParams","useState","page","setPage","maxPage","setMaxPage","orders","setOrders","isFirstRender","setIsFirstRender","refreshCount","setRefreshCount","append","useEffect","controller","AbortController","signal","headers","Headers","setting","method","fetch","_id","res","json","data","total","parseInt","Math","ceil","document","querySelector","scrollTo","name","ordersAPI","abort","Date","now","seeDetails","orderID","push","useUserOrdersPage","light","onClick","src","refreshIcone","title","length","as","Link","to","map","order","states","date","toLocaleString","split","client","address","reverse","find","state","confirmed","PaginationButtons","FilterOrdersStateOptions","setStatePreferece","defaultValue","onChange","preventDefault","value","handelChange","SortOrdersOptions","setSortPreferece","section","NotFaundMessage","FiltersBoard","DashboardOrders","location","useLocation","search","oldQuery","setOrderID","setState","sorting","setSorting","toString","useDashboardOrders","DashboardNav","placeholder","setSearch","data-testid"],"mappings":"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","file":"static/js/15.d39dfb6d.chunk.js","sourcesContent":["\r\nimport styled  from 'styled-components'\r\n\r\n   export  const Button= styled.a`\r\n     box-shadow: ${props => props.theme.lightBoxShadow};\r\npadding: 15px 40px;\r\ncolor:#fff;\r\nwidth:max-content;\r\n  background:${props => props.theme.darckYellow};\r\n  text-transform: uppercase;\r\n  text-align:center;\r\n  font-size: 16px;\r\n  font-family: \"Oswald\", sans-serif;\r\n  font-weight:600px;\r\n line-height:23.5px;\r\n  cursor:pointer;\r\n  letter-spacing:2px;\r\n  border-radius:4px;\r\n    text-decoration: none;\r\n\r\n    transform:'${(props)=>(props.small ? \"scale(0.7)\" : \"scale(1)\")}';\r\n  transition:all 0.5s ease;\r\n  &:hover{\r\n    background-color:${props => props.theme.black};\r\n  }\r\n  & > * {\r\n    cursor:pointer;\r\n  }\r\n    @media screen and (max-width: 550px){\r\n   transform:scale(0.8);\r\n`;\r\nexport const ButtonPrimary = styled(Button)`\r\n  background:${props => props.theme.orange};\r\n`;\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nconst Table = styled.div`\r\n  width: 100%;\r\n  max-width: 900px;\r\n  margin: 20px auto 0;\r\n  background: gray;\r\n  box-shadow: 1px 1px 5px #00000057;\r\n  background: #f3f3f3;\r\n`;\r\nconst TableHeader = styled.div`\r\n  width: 100%;\r\n  height: 60px;\r\n  background: #ccc;\r\n  box-shadow: 1px 1px 5px #00000057;\r\n  border-bottom: 1px solid #ccc;\r\n`;\r\nconst TableCells = styled.div`\r\nwith:100%;\r\nheight:50px;\r\nbackground:white;\r\nmargin: 1px 0;\r\nbackground:#fff;\r\nborder-bottom:1px solid #ccc;\r\nbox-shadow: 0 1px 3px #ccc;\r\n\r\n\r\n}\r\n`;\r\n\r\nexport default function OrdersTableSkeleton() {\r\n  return (\r\n    <Table>\r\n      <TableHeader />\r\n      <TableCells />\r\n      <TableCells />\r\n      <TableCells />\r\n      <TableCells />\r\n      <TableCells />\r\n    </Table>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/refresh.f1c42ba5.svg\";","import { DELETE } from \"../utils/http\";\r\nasync function deleteOrderAPI({ token, id }) {\r\n  try {\r\n    await DELETE(`/api/orders/${id}`, token);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport default deleteOrderAPI;\r\n","import styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useUserOrdersPage from \"../../hooks/useUserOrdersPage\";\r\nimport { ButtonPrimary } from \"../Buttons\";\r\nimport { SectionTitle } from \"../menu/Menu\";\r\nimport PaginationButtons from \"../PaginationButtons\";\r\nimport OrdersTableSkeleton from \"../OrdersTableSkeleton\";\r\nimport refreshIcone from \"../../img/refresh.svg\";\r\nimport { LoaderSpinner } from \"../LoaderSpinner\";\r\n\r\nconst Page = styled.main`\r\n  padding: 65px 5px;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  background: ${(props) => props.theme.lightYellow};\r\n  &:before {\r\n    display: ${(props) => (props.isLoading ? \"block\" : \"none\")};\r\n    position: absolute;\r\n    content: \" \";\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: #ffffff57;\r\n    z-index: 400;\r\n  }\r\n  & > ${LoaderSpinner} {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    z-index: 500;\r\n    margin: -60px 0 0 -60px;\r\n  }\r\n`;\r\nexport const TableHead = styled.thead`\r\n  background-color: ${(props) => props.theme.black};\r\n  color: ${(props) => props.theme.darckYellow};\r\n  & > tr th {\r\n    padding: 10px 0;\r\n    font-family: \"Oswald\", sans-serif;\r\n    font-size: 19px;\r\n  }\r\n`;\r\nexport const TableWrapper = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto 40px;\r\n  overflow-x: scroll;\r\n`;\r\nexport const OrdersTable = styled.table`\r\n  width: 900px;\r\n  margin: 20px auto 0;\r\n  border-spacing: 10px;\r\n  border-collapse: collapse;\r\n  border: 2px solid ${(props) => props.theme.black};\r\n  box-shadow: ${(props) => props.theme.lihgtBoxShadow};\r\n  text-transform: capitalize;\r\n  & > tbody {\r\n    background: #fff;\r\n  }\r\n  & > tbody td span + span {\r\n    margin-right: 5px;\r\n  }\r\n  & > tbody td {\r\n    padding: 10px 0;\r\n    cursor: pointer;\r\n  }\r\n  & > tbody tr {\r\n    border-bottom: 1px solid;\r\n  }\r\n`;\r\n\r\nconst CancelOrderButton = styled.button`\r\n  padding: 8px 5px;\r\n  cursor: pointer;\r\n  outline: none;\r\n  margin: 5px;\r\n  border-radius: 10px 5px;\r\n  border: none;\r\n  font-family: \"Oswald\", sans-serif;\r\n  transition: all 0.5s;\r\n  opacity: ${(props) => (props.disabled ? \"0.4\" : \"1\")};\r\n  &:hover {\r\n    background: ${(props) => (props.disabled ? \"unset\" : \"#cdc8c8\")};\r\n  }\r\n`;\r\nconst NotFounMessage = styled.div`\r\n  padding: 30px 0;\r\n  & > h3 {\r\n    margin-bottom: 40px;\r\n  }\r\n  @media screen and (max-width: 450px) {\r\n    font-size: 25px;\r\n  }\r\n  & > ${ButtonPrimary} {\r\n    padding: 15px 30px;\r\n  }\r\n`;\r\nconst NotFounIcone = styled.h2`\r\n  font-size: 50px;\r\n`;\r\nexport const RefreshButton = styled.div`\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  box-shadow: ${(props) => props.theme.lihgtBoxShadow};\r\n  background: ${(props) => props.theme.black};\r\n\r\n  margin: -46px 0 10px auto;\r\n  width: max-content;\r\n  display: flex;\r\n  transform: scale(0.7);\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    transform: scale(0.75);\r\n  }\r\n`;\r\n\r\nexport const RefreshIcone = styled.img`\r\n  height: 50%;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default function UserOrdersPage({ setNotification }) {\r\n  const {\r\n    seeDetails,\r\n    handleRefresh,\r\n    setPage,\r\n    page,\r\n    isLoading,\r\n    maxPage,\r\n    orders,\r\n    isFirstRender,\r\n    deleteOrder,\r\n  } = useUserOrdersPage({ setNotification });\r\n\r\n  return (\r\n    <Page isLoading={isLoading}>\r\n      {isLoading ? <LoaderSpinner /> : null}\r\n\r\n      <SectionTitle light>Mis Pedidos</SectionTitle>\r\n\r\n      <RefreshButton onClick={() => handleRefresh()}>\r\n        <RefreshIcone\r\n          onClick={() => handleRefresh()}\r\n          src={refreshIcone}\r\n          title=\"Refrescar Página\"\r\n        />\r\n      </RefreshButton>\r\n\r\n      {isLoading && isFirstRender && <OrdersTableSkeleton />}\r\n\r\n      {!isLoading && !isFirstRender && orders?.length === 0 && (\r\n        <NotFounMessage>\r\n          <NotFounIcone>👩🏻&zwj;🍳</NotFounIcone>\r\n          <h3>Ningún pedido realizado, tienes hambre?</h3>\r\n\r\n          <ButtonPrimary small as={Link} to=\"/menu\">\r\n            Ver Menú\r\n          </ButtonPrimary>\r\n        </NotFounMessage>\r\n      )}\r\n\r\n      {orders?.length !== 0 && (\r\n        <TableWrapper>\r\n          <OrdersTable>\r\n            <TableHead>\r\n              <tr>\r\n                <th>Nº de Pedido</th>\r\n                <th>Fecha</th>\r\n                <th>Dirección</th>\r\n                <th>Total</th>\r\n                <th>Estado</th>\r\n                <th>Acciones</th>\r\n              </tr>\r\n            </TableHead>\r\n            <tbody>\r\n              {orders?.map((order) => (\r\n                <tr key={order?._id} onClick={(e) => seeDetails(order._id)}>\r\n                  <td>{order?.orderID}</td>\r\n                  <td>\r\n                    <span>\r\n                      {\r\n                        new Date(order?.states[0].date)\r\n                          .toLocaleString()\r\n                          ?.split(\" \")[0]\r\n                      }\r\n                    </span>\r\n                    <br></br>\r\n                    <span>\r\n                      {\r\n                        new Date(order?.states[0].date)\r\n                          .toLocaleString()\r\n                          ?.split(\" \")[1]\r\n                      }\r\n                    </span>\r\n                  </td>\r\n                  <td>{order.client[0].address}</td>\r\n                  <td>${order?.total}</td>\r\n                  <td>\r\n                    {\" \"}\r\n                    <b>\r\n                      {\r\n                        [...order?.states]\r\n                          .reverse()\r\n                          .find((state) => state.confirmed === true).name\r\n                      }\r\n                    </b>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <CancelOrderButton\r\n                      disabled={\r\n                        order?.states[1].confirmed === true ? true : false\r\n                      }\r\n                      onClick={(e) => deleteOrder(e, order._id)}\r\n                    >\r\n                      Cancelar Pedido\r\n                    </CancelOrderButton>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </OrdersTable>\r\n        </TableWrapper>\r\n      )}\r\n\r\n      <PaginationButtons setPage={setPage} page={page} maxPage={maxPage} />\r\n    </Page>\r\n  );\r\n}\r\n","import {useHistory} from 'react-router-dom'\r\nimport {useState, useEffect } from 'react'\r\nimport {useStorage} from '../context/useStorage'\r\nimport deleteOrderAPI from '../API/deleteOrderAPI'\r\n\r\nexport default function useUserOrdersPage({setNotification}){\r\n\r\nconst history = useHistory()\r\nconst {token,setIsLoading,currentUser} = useStorage()\r\n\r\n\r\n////redirects to order details page with order id as url parameter\r\n\r\nconst seeDetails = (orderID) =>{\r\nsetIsLoading(true)\r\n history.push(`/myAccount/myOrders/${orderID}` )\r\n}\r\nconst deleteOrder = async(e,id) =>{\r\n e.stopPropagation();\r\n\r\nif (!e.target.disabled ){\r\n\r\nsetIsLoadingPage(true)\r\nawait deleteOrderAPI({token,id})\r\nhandleRefresh()\r\n\r\n\r\n}\r\n}\r\n\r\n  let query = new URLSearchParams();\r\n    let sizeLimit = 5\r\n\r\n  const[isLoading,setIsLoadingPage] = useState(false)\r\n    const [page, setPage] = useState(1)\r\n    const [maxPage, setMaxPage] = useState(1)\r\n    const [orders, setOrders] = useState([])\r\nconst [isFirstRender, setIsFirstRender] = useState(true)\r\nlet [refreshCount,setRefreshCount] = useState(0)\r\n\r\n///add  search params to the url query\r\n\r\n   query.append('page',page)\r\n   query.append('limit',sizeLimit)\r\n   query.append('sort',\"-createdAt\")\r\n\r\n\r\n////get all user orders\r\n\r\nuseEffect(() => {\r\n     setNotification(0)\r\n  const controller = new AbortController()\r\n const signal = controller.signal\r\n\r\nconst ordersAPI = async () =>{\r\n    setIsLoadingPage(true)\r\n\r\n  try{\r\n\r\n\r\n       const headers = new Headers();\r\n      headers.append('Accept', 'application/json');\r\n      headers.append('Authorization', `Bearer ${token}`);\r\n\r\n\r\n    const setting = {\r\n          method: 'GET',\r\n          headers: headers,\r\nsignal,\r\n        }\r\n\r\n     let res = await fetch(`/api/orders/user/${currentUser._id}?${query}`,setting)\r\n     let json = await res.json()\r\n\r\n    setOrders(json.data)\r\n\r\n    let total = parseInt(json.total)\r\n\r\n     setMaxPage(Math.ceil(total/sizeLimit))\r\n\r\n\r\ndocument.querySelector('body').scrollTo(0,60)\r\n        setIsFirstRender(false)\r\n     setIsLoadingPage(false)\r\n\r\n  }catch(err){\r\n    if(err.name === 'AbortError'){\r\n   console.log('Fetch Canseled: caught abort')\r\n }else{\r\n\r\n     console.log(err)\r\n\r\n  }\r\n}\r\n  }\r\n\r\n  ordersAPI()\r\n\r\n     return () =>{\r\n     controller.abort()\r\n   }\r\n\r\n },[page,refreshCount])\r\n\r\n\r\n\r\n const handleRefresh = () =>{\r\n\r\nsetRefreshCount( Date.now())\r\nsetPage(1)\r\n}\r\n\r\nreturn {seeDetails,handleRefresh,setPage,page,isLoading,maxPage,orders,isFirstRender,deleteOrder}\r\n\r\n}","\r\nimport {Option,OptionList} from './SortProductsOptions'\r\n\r\nexport default function FilterOrdersStateOptions({setStatePreferece,setPage,defaultValue}){\r\n\r\n  const handelChange = (e) =>{\r\n e.preventDefault()\r\n     setPage(1)\r\n setStatePreferece(e.target.value)\r\n}\r\n\r\nreturn(\r\n<OptionList defaultValue={defaultValue}  name=\"filterOrdersByState\" onChange={(e) =>handelChange(e)}>\r\n<Option value=\"all\" >Todos</Option>\r\n<Option value=\"finish\" >Liquidados</Option>\r\n<Option value=\"unfinish\" >Pendientes</Option>\r\n</OptionList>\r\n\r\n);\r\n\r\n}","\r\nimport {Option,OptionList} from './SortProductsOptions'\r\n\r\nexport default function SortOrdersOptions({setSortPreferece,defaultValue}){\r\n\r\n\r\nreturn(\r\n<OptionList  defaultValue={defaultValue} name=\"sortProductBy\" onChange={(e) => setSortPreferece(e.target.value)}>\r\n<Option value=\"-createdAt\" >Más recientes</Option>\r\n<Option value=\"createdAt\" >Más antiguos</Option>\r\n<Option value=\"total\" >Menor Monto</Option>\r\n<Option value=\"-total\">Mayor Monto</Option>\r\n\r\n</OptionList>\r\n\r\n);\r\n\r\n}","import styled from \"styled-components\";\r\nimport useDashboardOrders from \"../../hooks/useDashboardOrders\";\r\nimport DashboardNav from \"../DashboardNav\";\r\nimport refreshIcone from \"../../img/refresh.svg\";\r\nimport SearchBar from \"../MenuSearchBar\";\r\nimport {\r\n  RefreshButton,\r\n  RefreshIcone,\r\n  TableWrapper,\r\n} from \"../account/UserOrdersPage\";\r\nimport { LoaderSpinner } from \"./../LoaderSpinner\";\r\nimport { NotFaundMessage } from \"../menu/ProductsSection\";\r\nimport { SectionTitle } from \"../menu/Menu\";\r\nimport { FiltersBoard } from \"./DashboardProducts\";\r\nimport FilterOrderStateOptions from \"./../FilterOrderStateOptions\";\r\nimport SortOrdersOptions from \"./../SortOrdersOptions\";\r\nimport PaginationButtons from \"../PaginationButtons\";\r\nimport OrdersTableSkeleton from \"../OrdersTableSkeleton\";\r\n\r\nexport const Page = styled.section`\r\n  padding: 60px 05px;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  max-width: 1250px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  &:before {\r\n    display: ${(props) => (props.isLoading ? \"block\" : \"none\")};\r\n    position: absolute;\r\n    content: \" \";\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: #ffffff57;\r\n    z-index: 400;\r\n  }\r\n  & > ${LoaderSpinner} {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    z-index: 500;\r\n    margin: -60px 0 0 -60px;\r\n  }\r\n  & > ${NotFaundMessage} {\r\n    padding: 0 5px;\r\n  }\r\n  & > ${FiltersBoard} {\r\n    margin: 30px 5px 0;\r\n  }\r\n`;\r\nexport const TableHead = styled.thead`\r\n  background-color: #171717;\r\n  color: #fcba1c;\r\n  & > tr th {\r\n    padding: 10px 0;\r\n    font-family: \"Oswald\", sans-serif;\r\n    font-size: 19px;\r\n  }\r\n`;\r\nexport const OrdersTable = styled.table`\r\n  width: 900px;\r\n  margin: 20px auto 0;\r\n  border-spacing: 10px;\r\n  border-collapse: collapse;\r\n  border: 2px solid #171717;\r\n  text-transform: capitalize;\r\n\r\n  & > tbody {\r\n    background: #fff;\r\n  }\r\n\r\n  & > tbody tr td {\r\n    padding: 10px 0;\r\n    cursor: pointer;\r\n  }\r\n  & > tbody tr {\r\n    border-bottom: 1px solid;\r\n  }\r\n  & > tbody tr td small {\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nexport default function DashboardOrders({ setNotification }) {\r\n  const {\r\n    seeDetails,\r\n    handleRefresh,\r\n    setOrderID,\r\n    setSorting,\r\n    setPage,\r\n    setState,\r\n    page,\r\n    isLoading,\r\n    maxPage,\r\n    orders,\r\n    sorting,\r\n    isFirstRender,\r\n    orderID,\r\n    state,\r\n  } = useDashboardOrders({ setNotification });\r\n\r\n  return (\r\n    <Page isLoading={isLoading}>\r\n      <DashboardNav />\r\n      <SectionTitle>Pedidos</SectionTitle>\r\n\r\n      <SearchBar\r\n        defaultValue={orderID}\r\n        placeholder=\"Número de orden...\"\r\n        setSearch={setOrderID}\r\n      />\r\n      <FiltersBoard>\r\n        <FilterOrderStateOptions\r\n          defaultValue={state}\r\n          setPage={setPage}\r\n          setStatePreferece={setState}\r\n        />\r\n        <SortOrdersOptions\r\n          defaultValue={sorting}\r\n          setSortPreferece={setSorting}\r\n        />\r\n      </FiltersBoard>\r\n\r\n      <RefreshButton\r\n        data-testid=\"refresh-button\"\r\n        onClick={() => handleRefresh()}\r\n      >\r\n        <RefreshIcone src={refreshIcone} title=\"Refrescar Página\" />\r\n      </RefreshButton>\r\n      {isLoading ? <LoaderSpinner /> : null}\r\n\r\n      {isLoading && isFirstRender && <OrdersTableSkeleton />}\r\n\r\n      {!isLoading && !isFirstRender && orders?.length === 0 && (\r\n        <NotFaundMessage>\r\n          No se han encontrado coincidencias, intenta de nuevo!!\r\n        </NotFaundMessage>\r\n      )}\r\n\r\n      {orders?.length !== 0 && (\r\n        <TableWrapper>\r\n          <OrdersTable>\r\n            <TableHead>\r\n              <tr>\r\n                <th>Nº de Pedido</th>\r\n                <th>Fecha</th>\r\n                <th>Dirección</th>\r\n                <th>Total</th>\r\n                <th>Estado</th>\r\n              </tr>\r\n            </TableHead>\r\n            <tbody>\r\n              {orders?.map((order) => (\r\n                <tr\r\n                  key={order?.orderID}\r\n                  onClick={(e) => seeDetails(order?._id)}\r\n                >\r\n                  <td>{order?.orderID}</td>\r\n                  <td>\r\n                    <span>\r\n                      {\r\n                        new Date(order.states[0].date)\r\n                          .toLocaleString()\r\n                          .split(\" \")[0]\r\n                      }\r\n                    </span>\r\n                    <br></br>\r\n                    <span>\r\n                      {\r\n                        new Date(order.states[0].date)\r\n                          .toLocaleString()\r\n                          .split(\" \")[1]\r\n                      }\r\n                    </span>\r\n                  </td>\r\n                  <td>{order?.client[0].address}</td>\r\n                  <td>${order?.total}</td>\r\n                  <td>\r\n                    {\" \"}\r\n                    <b>\r\n                      {\r\n                        [...order?.states]\r\n                          .reverse()\r\n                          .find((state) => state.confirmed === true).name\r\n                      }\r\n                    </b>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </OrdersTable>\r\n        </TableWrapper>\r\n      )}\r\n\r\n      <PaginationButtons setPage={setPage} page={page} maxPage={maxPage} />\r\n    </Page>\r\n  );\r\n}\r\n","import {useHistory,useLocation} from 'react-router-dom'\r\nimport {useState, useEffect } from 'react'\r\nimport {useStorage} from '../context/useStorage'\r\n\r\n\r\nexport default function useDashboardOrders({setNotification}){\r\nconst history = useHistory()\r\nconst location = useLocation()\r\n\r\n\r\n\r\nconst {token,setIsLoading} = useStorage()\r\n\r\n\r\nconst seeDetails = (orderID) =>{\r\n      setIsLoading(true)\r\n history.push(`/dashboard/orders/${orderID}` )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let sizeLimit = 5\r\n\r\n\r\n  const [oldQuery, setOldQuery] = useState( new URLSearchParams(location.search))\r\n  const [orderID, setOrderID] = useState(\"\")\r\n  const[isLoading,setIsLoadingPage] = useState(false)\r\n    const [page, setPage] = useState(1)\r\n    const [maxPage, setMaxPage] = useState(1)\r\n    const [orders, setOrders] = useState([])\r\n    const [state,setState] =useState('all')\r\n  const [sorting, setSorting] = useState(\"-createdAt\")\r\nconst [isFirstRender, setIsFirstRender] = useState(true)\r\nlet [refreshCount,setRefreshCount] = useState(0)\r\n\r\n\r\n let query ;\r\n\r\nif(isFirstRender){\r\nquery = new URLSearchParams(oldQuery.toString())\r\n}else{\r\n query = new URLSearchParams() ;\r\n  query.append('sort', sorting)\r\n  query.append('page', page)\r\n  query.append('limit', sizeLimit)\r\n}\r\n\r\n\r\n\r\n\r\nuseEffect(() => {\r\n\r\nif(orderID !==\"\"){\r\nquery.append('orderID',orderID)\r\nsetState('all')\r\n}\r\nif(state !==\"all\"){\r\nquery.append('state',state)\r\n}\r\n\r\nsetPage(1)\r\n\r\n},[orderID,state,sorting])\r\n\r\n\r\nuseEffect(() => {\r\n    setNotification(0)\r\n  const controller = new AbortController()\r\n const signal = controller.signal\r\n\r\n\r\n\r\nconst ordersAPI = async () =>{\r\n    setIsLoadingPage(true)\r\n\r\n  try{\r\n\r\n\r\n       const headers = new Headers();\r\n      headers.append('Accept', 'application/json');\r\n      headers.append('Authorization', `Bearer ${token}`);\r\n\r\n\r\n    const setting = {\r\n          method: 'GET',\r\n          headers: headers,\r\nsignal,\r\n        }\r\n\r\n     let res = await fetch(`/api/orders?${query}`,setting)\r\n     let json = await res.json()\r\n\r\n    setOrders(json.data)\r\n\r\n    let total = parseInt(json.total)\r\n\r\n     setMaxPage(Math.ceil(total/sizeLimit))\r\n\r\n  history.push(`/dashboard/orders?${query}`)\r\n\r\ndocument.querySelector('body').scrollTo(0,60)\r\n        setIsFirstRender(false)\r\n     setIsLoadingPage(false)\r\n\r\n  }catch(err){\r\n    if(err.name === 'AbortError'){\r\n   console.log('Fetch Canseled: caught abort')\r\n }else{\r\n\r\n     console.log(err)\r\n\r\n  }\r\n}\r\n  }\r\n\r\n  ordersAPI()\r\n\r\n\r\n     return () =>{\r\n     controller.abort()\r\n   }\r\n }, [orderID,state,page,sorting,refreshCount])\r\n\r\n\r\n\r\n\r\n const handleRefresh = () =>{\r\nsetRefreshCount(Date.now())\r\nsetPage(1)\r\nsetSorting('-createdAt')\r\nsetState('all')\r\n}\r\n\r\n\r\nreturn {seeDetails,handleRefresh,setOrderID,setSorting,setState,setPage,page,isLoading,maxPage,orders,sorting,isFirstRender,orderID,sorting,state}\r\n\r\n\r\n}"],"sourceRoot":""}